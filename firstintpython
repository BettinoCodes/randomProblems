#should review over using a skip with a for loop 
#I decided to store the number of expected skips in the string from the length of it in a list 
purchase = "I went to the store and bought $10.23 for milk and $3.80 for cheese"

#reduce by 80%
list_of_prices = []
list_of_lenght_skip = []

for i in range(len(purchase)):
  if purchase[i] == '$':
    prices = ''
    start = i + 1
    while purchase[start] != ' ':
      prices += purchase[start]
      start += 1
    length = len(prices)
    list_of_lenght_skip.append(length)
    fltprce = float(prices) * .80
    newprice = round(fltprce, 2)
    list_of_prices.append(str(newprice))
    i = start

new_strng = ''
n = 0
y = 0
while y < len(purchase):
  if purchase[y] == '$':
    y += 1
    new_strng += '$' + list_of_prices[n]
    y += list_of_lenght_skip[n]
    n += 1
  else:
    new_strng += purchase[y]
    y += 1

#second method with the for loop, we learned that even if you increment the value of why iterating through a string it still counts it as the parts you are skipping
#to and keeps those characters, unless you use to continue to move ahead,now with the for loop we control the amount of continues by letting it know how many
#values is meant to be iterated before the space, and increment the space in the for loop if there's a skip available

#SOLUTION WITH FOR LOOP
# new_strng = ''
# n = 0
# skip = 0
# for y in range(len(purchase)):
#     if skip > 0:
#         skip -= 1
#         continue
#     else:
#         if purchase[y] == '$':
#             start = y + 1
#             new_strng += '$' + list_of_prices[n]
#             n += 1
#             while purchase[start] != ' ':
#                 skip += 1
#                 start += 1
#         else:
#             new_strng += purchase[y]
print(list_of_prices)
print(new_strng)

print(10.00 * .80)
